#include <iostream>
#include <string>
#include <cstring>

#include <tmmintrin.h> 
#include <xmmintrin.h>
#include <emmintrin.h>
#include <immintrin.h>
#include <smmintrin.h>

using namespace std;

// 定义了Byte，便于使用
typedef unsigned char Byte;
// 定义了32比特
typedef unsigned int bit32;

// MD5的一系列参数。参数是固定的，其实你不需要看懂这些
#define s11 7
#define s12 12
#define s13 17
#define s14 22
#define s21 5
#define s22 9
#define s23 14
#define s24 20
#define s31 4
#define s32 11
#define s33 16
#define s34 23
#define s41 6
#define s42 10
#define s43 15
#define s44 21

/**
 * @Basic MD5 functions.
 *
 * @param there bit32.
 *
 * @return one bit32.
 */
// 定义了一系列MD5中的具体函数
// 这四个计算函数是需要你进行SIMD并行化的
// 可以看到，FGHI四个函数都涉及一系列位运算，在数据上是对齐的，非常容易实现SIMD的并行化

#define F(x, y, z) (((x) & (y)) | ((~x) & (z)))
#define G(x, y, z) (((x) & (z)) | ((y) & (~z)))
#define H(x, y, z) ((x) ^ (y) ^ (z))
#define I(x, y, z) ((y) ^ ((x) | (~z)))

/**
 * @Rotate Left.
 *
 * @param {num} the raw number.
 *
 * @param {n} rotate left n.
 *
 * @return the number after rotated left.
 */
// 定义了一系列MD5中的具体函数
// 这五个计算函数（ROTATELEFT/FF/GG/HH/II）和之前的FGHI一样，都是需要你进行SIMD并行化的
// 但是你需要注意的是#define的功能及其效果，可以发现这里的FGHI是没有返回值的，为什么呢？你可以查询#define的含义和用法
#define ROTATELEFT(num, n) (((num) << (n)) | ((num) >> (32-(n))))

#define FF(a, b, c, d, x, s, ac) { \
  (a) += F ((b), (c), (d)) + (x) + ac; \
  (a) = ROTATELEFT ((a), (s)); \
  (a) += (b); \
}

#define GG(a, b, c, d, x, s, ac) { \
  (a) += G ((b), (c), (d)) + (x) + ac; \
  (a) = ROTATELEFT ((a), (s)); \
  (a) += (b); \
}
#define HH(a, b, c, d, x, s, ac) { \
  (a) += H ((b), (c), (d)) + (x) + ac; \
  (a) = ROTATELEFT ((a), (s)); \
  (a) += (b); \
}
#define II(a, b, c, d, x, s, ac) { \
  (a) += I ((b), (c), (d)) + (x) + ac; \
  (a) = ROTATELEFT ((a), (s)); \
  (a) += (b); \
}


//SSE_并行
#define SSE_F(x, y, z) _mm_or_si128(_mm_and_si128((x), (y)), _mm_and_si128(_mm_andnot_si128((x), _mm_set1_epi32(-1)), (z)))
#define SSE_G(x, y, z) _mm_or_si128(_mm_and_si128((x), (z)), _mm_and_si128((y), _mm_andnot_si128((z), _mm_set1_epi32(-1))))
#define SSE_H(x, y, z) _mm_xor_si128(_mm_xor_si128((x), (y)), (z))
#define SSE_I(x, y, z) _mm_xor_si128((y), _mm_or_si128((x), _mm_andnot_si128((z), _mm_set1_epi32(-1))))


#define SSE_ROTATELEFT(num, n) \
  _mm_or_si128( \
      _mm_slli_epi32((num), (n)), \
      _mm_srli_epi32((num), 32 - (n)) \
  )


#define SSE_FF(a_sse, b_sse, c_sse, d_sse, x_sse, s, ac) { \
    __m128i _f = SSE_F(b_sse, c_sse, d_sse); \
    __m128i temp = _mm_add_epi32(_mm_add_epi32(_f, x_sse), _mm_set1_epi32(ac)); \
    temp = _mm_add_epi32(a_sse, temp); \
    temp = SSE_ROTATELEFT(temp, s); \
    a_sse = _mm_add_epi32(b_sse, temp); \
}

#define SSE_GG(a_sse, b_sse, c_sse, d_sse, x_sse, s, ac) { \
    __m128i _g = SSE_G(b_sse, c_sse, d_sse); \
    __m128i temp = _mm_add_epi32(_mm_add_epi32(_g, x_sse), _mm_set1_epi32(ac)); \
    temp = _mm_add_epi32(a_sse, temp); \
    temp = SSE_ROTATELEFT(temp, s); \
    a_sse = _mm_add_epi32(b_sse, temp); \
}

#define SSE_HH(a_sse, b_sse, c_sse, d_sse, x_sse, s, ac) { \
    __m128i _h = SSE_H(b_sse, c_sse, d_sse); \
    __m128i temp = _mm_add_epi32(_mm_add_epi32(_h, x_sse), _mm_set1_epi32(ac)); \
    temp = _mm_add_epi32(a_sse, temp); \
    temp = SSE_ROTATELEFT(temp, s); \
    a_sse = _mm_add_epi32(b_sse, temp); \
}

#define SSE_II(a_sse, b_sse, c_sse, d_sse, x_sse, s, ac) { \
    __m128i _i = SSE_I(b_sse, c_sse, d_sse); \
    __m128i temp = _mm_add_epi32(_mm_add_epi32(_i, x_sse), _mm_set1_epi32(ac)); \
    temp = _mm_add_epi32(a_sse, temp); \
    temp = SSE_ROTATELEFT(temp, s); \
    a_sse = _mm_add_epi32(b_sse, temp); \
}

void MD5Hash(string input, bit32 *state);
void MD5Hash_SSE(string input[4], __m128i *state);
